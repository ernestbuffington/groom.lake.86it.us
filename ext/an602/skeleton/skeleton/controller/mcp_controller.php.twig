<?php
/**
 *
 * {{ EXTENSION.extension_display_name }}. An extension for the AN602 Forum Software package.
 *
 * @copyright (c) {{ "now"|date("Y") ~ (AUTHORS.0.author_name ? ', ' ~ AUTHORS.0.author_name) ~ (AUTHORS.0.author_homepage ? ', ' ~ AUTHORS.0.author_homepage) }}
 * @license GNU General Public License, version 2 (GPL-2.0)
 *
 */

namespace {{ EXTENSION.vendor_name }}\{{ EXTENSION.extension_name }}\controller;

/**
 * {{ EXTENSION.extension_display_name }} MCP controller.
 */
class mcp_controller
{
	/** @var {{ LANGUAGE.class }} */
	protected ${{ LANGUAGE.object }};

	/** @var \an602\request\request */
	protected $request;

	/** @var \an602\template\template */
	protected $template;

	/** @var string Custom form action */
	protected $u_action;

	/**
	 * Constructor.
	 *
	 * @param {{ LANGUAGE.class ~ LANGUAGE.indent.class }}		${{ LANGUAGE.object ~ LANGUAGE.indent.object}}	{{ LANGUAGE.object|capitalize }} object
	 * @param \an602\request\request		$request	Request object
	 * @param \an602\template\template		$template	Template object
	 */
	public function __construct({{ LANGUAGE.class }} ${{ LANGUAGE.object }}, \an602\request\request $request, \an602\template\template $template)
	{
		$this->{{ LANGUAGE.object ~ LANGUAGE.indent.object }}	= ${{ LANGUAGE.object }};
		$this->request	= $request;
		$this->template	= $template;
	}

	/**
	 * Display the options a moderator can take for this extension.
	 *
	 * @return void
	 */
	public function display_options()
	{
		// Create a form key for preventing CSRF attacks
		add_form_key('{{ EXTENSION.vendor_name|lower }}_{{ EXTENSION.extension_name|lower }}_mcp');

		// Create an array to collect errors that will be output to the user
		$errors = [];

		// Is the form being submitted to us?
		if ($this->request->is_set_post('submit'))
		{
			// Test if the submitted form is valid
			if (!check_form_key('{{ EXTENSION.vendor_name|lower }}_{{ EXTENSION.extension_name|lower }}_mcp'))
			{
				$errors[] = $this->{{ LANGUAGE.object }}->lang('FORM_INVALID');
			}

			// If no errors, process the form data
			if (empty($errors))
			{
				// Do your awesome moderator stuff here!
			}
		}

		$s_errors = !empty($errors);

		// Set output variables for display in the template
		$this->template->assign_vars([
			'S_ERROR'		=> $s_errors,
			'ERROR_MSG'		=> $s_errors ? implode('<br />', $errors) : '',

			'U_MCP_ACTION'	=> $this->u_action,
		]);
	}

	/**
	 * Set custom form action.
	 *
	 * @param string	$u_action	Custom form action
	 * @return void
	 */
	public function set_page_url($u_action)
	{
		$this->u_action = $u_action;
	}
}
